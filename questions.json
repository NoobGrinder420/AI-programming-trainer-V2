{"0": "Given an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\n\nExample:\n\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n\n", "1": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n\nInput: (2 -> 4 -> 3) + (5 -> 6 -> 4)\nOutput: 7 -> 0 -> 8", "2": "Given a string, find the length of the longest substring without repeating characters.\n\nExamples:\n\nGiven \"abcabcbb\", the answer is \"abc\", which the length is 3.\n\nGiven \"bbbbb\", the answer is \"b\", with the length of 1.\n\nGiven \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.", "3": "There are two sorted arrays nums1 and nums2 of size m and n respectively.\n\nFind the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).\n\nExample 1:\n\nnums1 = [1, 3]\nnums2 = [2]\n\nThe median is 2.0\n\n\n\nExample 2:\n\nnums1 = [1, 2]\nnums2 = [3, 4]\n\nThe median is (2 + 3)/2 = 2.5\n\n", "4": "Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\n\nExample:\n\nInput: \"babad\"\n\nOutput: \"bab\"\n\nNote: \"aba\" is also a valid answer.\n\n\n\nExample:\n\nInput: \"cbbd\"\n\nOutput: \"bb\"\n\n", "5": "\nThe string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n\nP   A   H   N\nA P L S I I G\nY   I   R\n\n\nAnd then read line by line: \"PAHNAPLSIIGYIR\"\n\n\nWrite the code that will take a string and make this conversion given a number of rows:\n\nstring convert(string text, int nRows);\n\nconvert(\"PAYPALISHIRING\", 3) should return \"PAHNAPLSIIGYIR\".\n", "6": "Reverse digits of an integer.\n\n\nExample1: x =  123, return  321\nExample2: x = -123, return -321\n\n\nclick to show spoilers.\n\nHave you thought about this?\n\nHere are some good questions to ask before coding. Bonus points for you if you have already thought through this!\n\nIf the integer's last digit is 0, what should the output be? ie, cases such as 10, 100.\n\nDid you notice that the reversed integer might overflow? Assume the input is a 32-bit integer, then the reverse of 1000000003 overflows. How should you handle such cases?\n\nFor the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\n\n\n\n\n\nNote:\nThe input is assumed to be a 32-bit signed integer. Your function should return 0 when the reversed integer overflows.\n", "7": "Implement atoi to convert a string to an integer.\n\nHint: Carefully consider all possible input cases. If you want a challenge, please do not see below and ask yourself what are the possible input cases.\n\n\nNotes: \nIt is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible to gather all the input requirements up front. \n\n\nUpdate (2015-02-10):\nThe signature of the C++ function had been updated. If you still see your function signature accepts a const char * argument, please click the reload button  to reset your code definition.\n\n\nspoilers alert... click to show requirements for atoi.\n\nRequirements for atoi:\n\nThe function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.\n\nThe string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.\n\nIf the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.\n\nIf no valid conversion could be performed, a zero value is returned. If the correct value is out of the range of representable values, INT_MAX (2147483647) or INT_MIN (-2147483648) is returned.\n\n", "8": "Determine whether an integer is a palindrome. Do this without extra space.\n\nclick to show spoilers.\n\nSome hints:\n\nCould negative integers be palindromes? (ie, -1)\n\nIf you are thinking of converting the integer to string, note the restriction of using extra space.\n\nYou could also try reversing an integer. However, if you have solved the problem \"Reverse Integer\", you know that the reversed integer might overflow. How would you handle such case?\n\nThere is a more generic way of solving this problem.\n\n", "9": "Implement regular expression matching with support for '.' and '*'.\n\n\n'.' Matches any single character.\n'*' Matches zero or more of the preceding element.\n\nThe matching should cover the entire input string (not partial).\n\nThe function prototype should be:\nbool isMatch(const char *s, const char *p)\n\nSome examples:\nisMatch(\"aa\",\"a\") \u2192 false\nisMatch(\"aa\",\"aa\") \u2192 true\nisMatch(\"aaa\",\"aa\") \u2192 false\nisMatch(\"aa\", \"a*\") \u2192 true\nisMatch(\"aa\", \".*\") \u2192 true\nisMatch(\"ab\", \".*\") \u2192 true\nisMatch(\"aab\", \"c*a*b\") \u2192 true\n", "10": "Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\n\nNote: You may not slant the container and n is at least 2.\n", "11": "Given an integer, convert it to a roman numeral.\n\n\nInput is guaranteed to be within the range from 1 to 3999.", "12": "Given a roman numeral, convert it to an integer.\n\nInput is guaranteed to be within the range from 1 to 3999.", "13": "Write a function to find the longest common prefix string amongst an array of strings.\n", "14": "Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\n\nNote: The solution set must not contain duplicate triplets.\n\n\nFor example, given array S = [-1, 0, 1, 2, -1, -4],\n\nA solution set is:\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]\n", "15": "Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.\n\n\n    For example, given array S = {-1 2 1 -4}, and target = 1.\n\n    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n", "16": "Given a digit string, return all possible letter combinations that the number could represent.\n\n\n\nA mapping of digit to letters (just like on the telephone buttons) is given below.\n\n\n\nInput:Digit string \"23\"\nOutput: [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\n\n\n\nNote:\nAlthough the above answer is in lexicographical order, your answer could be in any order you want.\n", "17": "Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.\n\nNote: The solution set must not contain duplicate quadruplets.\n\n\n\nFor example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.\n\nA solution set is:\n[\n  [-1,  0, 0, 1],\n  [-2, -1, 1, 2],\n  [-2,  0, 0, 2]\n]\n", "18": "Given a linked list, remove the nth node from the end of list and return its head.\n\n\nFor example,\n\n\n   Given linked list: 1->2->3->4->5, and n = 2.\n\n   After removing the second node from the end, the linked list becomes 1->2->3->5.\n\n\n\nNote:\nGiven n will always be valid.\nTry to do this in one pass.\n", "19": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\nThe brackets must close in the correct order, \"()\" and \"()[]{}\" are all valid but \"(]\" and \"([)]\" are not.\n", "20": "Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.", "21": "\nGiven n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n\n\n\nFor example, given n = 3, a solution set is:\n\n\n[\n  \"((()))\",\n  \"(()())\",\n  \"(())()\",\n  \"()(())\",\n  \"()()()\"\n]\n", "22": "\nMerge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.\n", "23": "\nGiven a linked list, swap every two adjacent nodes and return its head.\n\n\n\nFor example,\nGiven 1->2->3->4, you should return the list as 2->1->4->3.\n\n\n\nYour algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.\n", "24": "\nGiven a linked list, reverse the nodes of a linked list k at a time and return its modified list.\n\n\n\nk is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.\n\nYou may not alter the values in the nodes, only nodes itself may be changed.\n\nOnly constant memory is allowed.\n\n\nFor example,\nGiven this linked list: 1->2->3->4->5\n\n\n\nFor k = 2, you should return: 2->1->4->3->5\n\n\n\nFor k = 3, you should return: 3->2->1->4->5\n", "25": "\nGiven a sorted array, remove the duplicates in place such that each element appear only once and return the new length.\n\n\nDo not allocate extra space for another array, you must do this in place with constant memory.\n\n\n\nFor example,\nGiven input array nums = [1,1,2],\n\n\nYour function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn't matter what you leave beyond the new length.\n", "26": "Given an array and a value, remove all instances of that value in place and return the new length.\n\n\nDo not allocate extra space for another array, you must do this in place with constant memory.\n\nThe order of elements can be changed. It doesn't matter what you leave beyond the new length.\n\n\nExample:\nGiven input array nums = [3,2,2,3], val = 3\n\n\nYour function should return length = 2, with the first two elements of nums being 2.", "27": "\nImplement strStr().\n\n\nReturns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n", "28": "\nDivide two integers without using multiplication, division and mod operator.\n\n\nIf it is overflow, return MAX_INT.\n", "29": "\nYou are given a string, s, and a list of words, words, that are all of the same length. Find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters.\n\n\n\nFor example, given:\ns: \"barfoothefoobarman\"\nwords: [\"foo\", \"bar\"]\n\n\n\nYou should return the indices: [0,9].\n(order does not matter).\n", "30": "\nImplement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.\n\n\nIf such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).\n\n\nThe replacement must be in-place, do not allocate extra memory.\n\n\nHere are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.\n1,2,3 &#8594; 1,3,2\n3,2,1 &#8594; 1,2,3\n1,1,5 &#8594; 1,5,1\n", "31": "Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.\n\n\nFor \"(()\", the longest valid parentheses substring is \"()\", which has length = 2.\n\n\nAnother example is \")()())\", where the longest valid parentheses substring is \"()()\", which has length = 4.\n", "32": "Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.\n\n(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).\n\nYou are given a target value to search. If found in the array return its index, otherwise return -1.\n\nYou may assume no duplicate exists in the array.", "33": "Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.\n\nYour algorithm's runtime complexity must be in the order of O(log n).\n\nIf the target is not found in the array, return [-1, -1].\n\n\nFor example,\nGiven [5, 7, 7, 8, 8, 10] and target value 8,\nreturn [3, 4].\n", "34": "Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\nYou may assume no duplicates in the array.\n\n\nHere are few examples.\n[1,3,5,6], 5 &#8594; 2\n[1,3,5,6], 2 &#8594; 1\n[1,3,5,6], 7 &#8594; 4\n[1,3,5,6], 0 &#8594; 0\n", "35": "Determine if a Sudoku is valid, according to: Sudoku Puzzles - The Rules.\n\nThe Sudoku board could be partially filled, where empty cells are filled with the character '.'.\n\n\n\nA partially filled sudoku which is valid.\n\n\nNote:\nA valid Sudoku board (partially filled) is not necessarily solvable. Only the filled cells need to be validated.\n", "36": "Write a program to solve a Sudoku puzzle by filling the empty cells.\n\nEmpty cells are indicated by the character '.'.\n\nYou may assume that there will be only one unique solution.\n\n\n\nA sudoku puzzle...\n\n\n\n\n...and its solution numbers marked in red.\n", "37": "The count-and-say sequence is the sequence of integers with the first five terms as following:\n\n1.     1\n2.     11\n3.     21\n4.     1211\n5.     111221\n\n\n\n1 is read off as \"one 1\" or 11.\n11 is read off as \"two 1s\" or 21.\n21 is read off as \"one 2, then one 1\" or 1211.\n\n\n\nGiven an integer n, generate the nth term of the count-and-say sequence.\n\n\n\nNote: Each term of the sequence of integers will be represented as a string.\n\n\nExample 1:\n\nInput: 1\nOutput: \"1\"\n\n\n\nExample 2:\n\nInput: 4\nOutput: \"1211\"\n\n", "38": "\nGiven a set of candidate numbers (C) (without duplicates) and a target number (T), find all unique combinations in C where the candidate numbers sums to T. \n\n\nThe same repeated number may be chosen from C unlimited number of times.\n\n\nNote:\n\nAll numbers (including target) will be positive integers.\nThe solution set must not contain duplicate combinations.\n\n\n\n\nFor example, given candidate set [2, 3, 6, 7] and target 7, \nA solution set is: \n\n[\n  [7],\n  [2, 2, 3]\n]\n\n", "39": "\nGiven a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.\n\n\nEach number in C may only be used once in the combination.\n\nNote:\n\nAll numbers (including target) will be positive integers.\nThe solution set must not contain duplicate combinations.\n\n\n\n\nFor example, given candidate set [10, 1, 2, 7, 6, 1, 5] and target 8, \nA solution set is: \n\n[\n  [1, 7],\n  [1, 2, 5],\n  [2, 6],\n  [1, 1, 6]\n]\n\n", "40": "\nGiven an unsorted integer array, find the first missing positive integer.\n\n\n\nFor example,\nGiven [1,2,0] return 3,\nand [3,4,-1,1] return 2.\n\n\n\nYour algorithm should run in O(n) time and uses constant space.\n", "41": "\nGiven n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining. \n\n\n\nFor example, \nGiven [0,1,0,2,1,0,1,3,2,1,2,1], return 6.\n\n\n\n\nThe above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!", "42": "Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2.\n\nNote:\n\nThe length of both num1 and num2 is < 110.\nBoth num1 and num2 contains only digits 0-9.\nBoth num1 and num2 does not contain any leading zero.\nYou must not use any built-in BigInteger library or convert the inputs to integer directly.\n\n", "43": "Implement wildcard pattern matching with support for '?' and '*'.\n\n\n'?' Matches any single character.\n'*' Matches any sequence of characters (including the empty sequence).\n\nThe matching should cover the entire input string (not partial).\n\nThe function prototype should be:\nbool isMatch(const char *s, const char *p)\n\nSome examples:\nisMatch(\"aa\",\"a\") &rarr; false\nisMatch(\"aa\",\"aa\") &rarr; true\nisMatch(\"aaa\",\"aa\") &rarr; false\nisMatch(\"aa\", \"*\") &rarr; true\nisMatch(\"aa\", \"a*\") &rarr; true\nisMatch(\"ab\", \"?*\") &rarr; true\nisMatch(\"aab\", \"c*a*b\") &rarr; false\n", "44": "\nGiven an array of non-negative integers, you are initially positioned at the first index of the array.\n\n\nEach element in the array represents your maximum jump length at that position. \n\n\nYour goal is to reach the last index in the minimum number of jumps.\n\n\n\nFor example:\nGiven array A = [2,3,1,1,4]\n\n\nThe minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.)\n\n\n\nNote:\nYou can assume that you can always reach the last index.", "45": "\nGiven a collection of distinct numbers, return all possible permutations.\n\n\n\nFor example,\n[1,2,3] have the following permutations:\n\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]\n\n", "46": "\nGiven a collection of numbers that might contain duplicates, return all possible unique permutations.\n\n\n\nFor example,\n[1,1,2] have the following unique permutations:\n\n[\n  [1,1,2],\n  [1,2,1],\n  [2,1,1]\n]\n\n", "47": "You are given an n x n 2D matrix representing an image.\n\nRotate the image by 90 degrees (clockwise).\n\nNote:\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\n\n\nExample 1:\n\nGiven input matrix = \n[\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n],\n\nrotate the input matrix in-place such that it becomes:\n[\n  [7,4,1],\n  [8,5,2],\n  [9,6,3]\n]\n\n\n\nExample 2:\n\nGiven input matrix =\n[\n  [ 5, 1, 9,11],\n  [ 2, 4, 8,10],\n  [13, 3, 6, 7],\n  [15,14,12,16]\n], \n\nrotate the input matrix in-place such that it becomes:\n[\n  [15,13, 2, 5],\n  [14, 3, 4, 1],\n  [12, 6, 8, 9],\n  [16, 7,10,11]\n]\n\n", "48": "Given an array of strings, group anagrams together.\n\n\nFor example, given: [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"], \nReturn:\n\n[\n  [\"ate\", \"eat\",\"tea\"],\n  [\"nat\",\"tan\"],\n  [\"bat\"]\n]\n\nNote: All inputs will be in lower-case.", "49": "Given an array of strings, group anagrams together.\n\n\nFor example, given: [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"], \nReturn:\n\n[\n  [\"ate\", \"eat\",\"tea\"],\n  [\"nat\",\"tan\"],\n  [\"bat\"]\n]\n\nNote: All inputs will be in lower-case.", "50": "Implement pow(x, n).\n", "51": "The n-queens puzzle is the problem of placing n queens on an n\u00d7n chessboard such that no two queens attack each other.\n\n\n\nGiven an integer n, return all distinct solutions to the n-queens puzzle.\n\nEach solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.\n\nFor example,\nThere exist two distinct solutions to the 4-queens puzzle:\n\n[\n [\".Q..\",  // Solution 1\n  \"...Q\",\n  \"Q...\",\n  \"..Q.\"],\n\n [\"..Q.\",  // Solution 2\n  \"Q...\",\n  \"...Q\",\n  \".Q..\"]\n]\n", "52": "Follow up for N-Queens problem.\n\nNow, instead outputting board configurations, return the total number of distinct solutions.\n\n", "53": "\nFind the contiguous subarray within an array (containing at least one number) which has the largest sum.\n\n\nFor example, given the array [-2,1,-3,4,-1,2,1,-5,4],\nthe contiguous subarray [4,-1,2,1] has the largest sum = 6.\n\n\nclick to show more practice.\n\nMore practice:\n\nIf you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.\n", "54": "Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.\n\n\n\nFor example,\nGiven the following matrix:\n\n\n[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\n\n\nYou should return [1,2,3,6,9,8,7,4,5].\n", "55": "\nGiven an array of non-negative integers, you are initially positioned at the first index of the array.\n\n\nEach element in the array represents your maximum jump length at that position. \n\n\nDetermine if you are able to reach the last index.\n\n\n\nFor example:\nA = [2,3,1,1,4], return true.\n\n\nA = [3,2,1,0,4], return false.\n", "56": "Given a collection of intervals, merge all overlapping intervals.\n\n\nFor example,\nGiven [1,3],[2,6],[8,10],[15,18],\nreturn [1,6],[8,10],[15,18].\n", "57": "Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).\n\nYou may assume that the intervals were initially sorted according to their start times.\n\n\nExample 1:\nGiven intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].\n\n\n\nExample 2:\nGiven [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].\n\n\n\nThis is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].\n", "58": "Given a string s consists of upper/lower-case alphabets and empty space characters ' ', return the length of last word in the string.\n\nIf the last word does not exist, return 0.\n\nNote: A word is defined as a character sequence consists of non-space characters only.\n\n\nFor example, \nGiven s = \"Hello World\",\nreturn 5.\n", "59": "Given an integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.\n\n\nFor example,\nGiven n = 3,\n\nYou should return the following matrix:\n\n[\n [ 1, 2, 3 ],\n [ 8, 9, 4 ],\n [ 7, 6, 5 ]\n]\n", "60": "The set [1,2,3,&#8230;,n] contains a total of n! unique permutations.\n\nBy listing and labeling all of the permutations in order,\nWe get the following sequence (ie, for n = 3):\n\n\"123\"\n\"132\"\n\"213\"\n\"231\"\n\"312\"\n\"321\"\n\n\n\nGiven n and k, return the kth permutation sequence.\n\nNote: Given n will be between 1 and 9 inclusive.", "61": "Given a list, rotate the list to the right by k places, where k is non-negative.\n\nFor example:\nGiven 1->2->3->4->5->NULL and k = 2,\nreturn 4->5->1->2->3->NULL.", "62": "A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\n\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\n\nHow many possible unique paths are there?\n\n\n\nAbove is a 3 x 7 grid. How many possible unique paths are there?\n\n\nNote: m and n will be at most 100.", "63": "Follow up for \"Unique Paths\":\n\nNow consider if some obstacles are added to the grids. How many unique paths would there be?\n\nAn obstacle and empty space is marked as 1 and 0 respectively in the grid.\n\nFor example,\nThere is one obstacle in the middle of a 3x3 grid as illustrated below.\n\n[\n  [0,0,0],\n  [0,1,0],\n  [0,0,0]\n]\n\nThe total number of unique paths is 2.\n\nNote: m and n will be at most 100.", "64": "Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.\n\nNote: You can only move either down or right at any point in time.", "65": "Validate if a given string is numeric.\n\n\nSome examples:\n\"0\" => true\n\"   0.1  \" => true\n\"abc\" => false\n\"1 a\" => false\n\"2e10\" => true\n\n\nNote: It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one.\n\n\n\nUpdate (2015-02-10):\nThe signature of the C++ function had been updated. If you still see your function signature accepts a const char * argument, please click the reload button  to reset your code definition.\n", "66": "Given a non-negative integer represented as a non-empty array of digits, plus one to the integer.\n\nYou may assume the integer do not contain any leading zero, except the number 0 itself.\n\nThe digits are stored such that the most significant digit is at the head of the list.", "67": "\nGiven two binary strings, return their sum (also a binary string).\n\n\n\nFor example,\na = \"11\"\nb = \"1\"\nReturn \"100\".\n", "68": "\nGiven an array of words and a length L, format the text such that each line has exactly L characters and is fully (left and right) justified.\n \n\n\nYou should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly L characters.\n\n\n\nExtra spaces between words should be distributed as evenly as possible. If the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\n\n\n\nFor the last line of text, it should be left justified and no extra space is inserted between words.\n\n\n\nFor example,\nwords: [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"]\nL: 16.\n\n\n\nReturn the formatted lines as:\n\n[\n   \"This    is    an\",\n   \"example  of text\",\n   \"justification.  \"\n]\n\n\n\n\nNote: Each word is guaranteed not to exceed L in length.\n\n\n\nclick to show corner cases.\n\nCorner Cases:\n\n\nA line other than the last line might contain only one word. What should you do in this case?\nIn this case, that line should be left-justified.\n\n", "69": "Implement int sqrt(int x).\n\nCompute and return the square root of x.", "70": "You are climbing a stair case. It takes n steps to reach to the top.\n\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n\n\nNote: Given n will be a positive integer.\n", "71": "Given an absolute path for a file (Unix-style), simplify it.\n\nFor example,\npath = \"/home/\", => \"/home\"\npath = \"/a/./b/../../c/\", => \"/c\"\n\n\nclick to show corner cases.\n\nCorner Cases:\n\n\n\nDid you consider the case where path = \"/../\"?\nIn this case, you should return \"/\".\nAnother corner case is the path might contain multiple slashes '/' together, such as \"/home//foo/\".\nIn this case, you should ignore redundant slashes and return \"/home/foo\".\n\n", "72": "\nGiven two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)\n\n\n\nYou have the following 3 operations permitted on a word:\n\n\n\na) Insert a character\nb) Delete a character\nc) Replace a character\n", "73": "\nGiven a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in place.\n\n\nclick to show follow up.\n\nFollow up:\n\n\nDid you use extra space?\nA straight forward solution using O(mn) space is probably a bad idea.\nA simple improvement uses O(m + n) space, but still not the best solution.\nCould you devise a constant space solution?\n\n", "74": "Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:\n\n\n\nIntegers in each row are sorted from left to right.\nThe first integer of each row is greater than the last integer of the previous row.\n\n\n\n\nFor example,\n\nConsider the following matrix:\n\n\n[\n  [1,   3,  5,  7],\n  [10, 11, 16, 20],\n  [23, 30, 34, 50]\n]\n\n\nGiven target = 3, return true.", "75": "\nGiven an array with n objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.\n\n\n\nHere, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.\n\n\n\nNote:\nYou are not suppose to use the library's sort function for this problem.\n\n\nclick to show follow up.\n\n\nFollow up:\nA rather straight forward solution is a two-pass algorithm using counting sort.\nFirst, iterate the array counting number of 0's, 1's, and 2's, then overwrite array with total number of 0's, then 1's and followed by 2's.\nCould you come up with an one-pass algorithm using only constant space?\n\n", "76": "\nGiven a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).\n\n\n\nFor example,\nS = \"ADOBECODEBANC\"\nT = \"ABC\"\n\n\nMinimum window is \"BANC\".\n\n\n\nNote:\nIf there is no such window in S that covers all characters in T, return the empty string \"\".\n\n\nIf there are multiple such windows, you are guaranteed that there will always be only one unique minimum window in S.\n", "77": "\nGiven two integers n and k, return all possible combinations of k numbers out of 1 ... n.\n\n\nFor example,\nIf n = 4 and k = 2, a solution is:\n\n\n\n[\n  [2,4],\n  [3,4],\n  [2,3],\n  [1,2],\n  [1,3],\n  [1,4],\n]\n", "78": "\nGiven a set of distinct integers, nums, return all possible subsets.\n\nNote: The solution set must not contain duplicate subsets.\n\n\nFor example,\nIf nums = [1,2,3], a solution is:\n\n\n\n[\n  [3],\n  [1],\n  [2],\n  [1,2,3],\n  [1,3],\n  [2,3],\n  [1,2],\n  []\n]\n", "79": "\nGiven a 2D board and a word, find if the word exists in the grid.\n\n\nThe word can be constructed from letters of sequentially adjacent cell, where \"adjacent\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.\n\n\n\nFor example,\nGiven board = \n\n[\n  ['A','B','C','E'],\n  ['S','F','C','S'],\n  ['A','D','E','E']\n]\n\n\nword = \"ABCCED\", -> returns true,\nword = \"SEE\", -> returns true,\nword = \"ABCB\", -> returns false.\n", "80": "\nFollow up for \"Remove Duplicates\":\nWhat if duplicates are allowed at most twice?\n\n\nFor example,\nGiven sorted array nums = [1,1,1,2,2,3],\n\n\nYour function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3. It doesn't matter what you leave beyond the new length.\n", "81": "\nFollow up for \"Search in Rotated Sorted Array\":\nWhat if duplicates are allowed?\n\nWould this affect the run-time complexity? How and why?\n\n\nSuppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.\n\n(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).\n\nWrite a function to determine if a given target is in the array.\n\nThe array may contain duplicates.", "82": "\nGiven a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.\n\n\nFor example,\nGiven 1->2->3->3->4->4->5, return 1->2->5.\nGiven 1->1->1->2->3, return 2->3.\n", "83": "\nGiven a sorted linked list, delete all duplicates such that each element appear only once.\n\n\nFor example,\nGiven 1->1->2, return 1->2.\nGiven 1->1->2->3->3, return 1->2->3.\n", "84": "\nGiven n non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.\n\n\n\n\nAbove is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].\n\n\n\n\nThe largest rectangle is shown in the shaded area, which has area = 10 unit.\n\n\n\nFor example,\nGiven heights = [2,1,5,6,2,3],\nreturn 10.\n", "85": "\nGiven a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.\n\n\nFor example, given the following matrix:\n\n1 0 1 0 0\n1 0 1 1 1\n1 1 1 1 1\n1 0 0 1 0\n\nReturn 6.\n", "86": "Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.\n\n\nYou should preserve the original relative order of the nodes in each of the two partitions.\n\n\nFor example,\nGiven 1->4->3->2->5->2 and x = 3,\nreturn 1->2->2->4->3->5.\n", "87": "\nGiven a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.\n\n\nBelow is one possible representation of s1 = \"great\":\n\n\n    great\n   /    \\\n  gr    eat\n / \\    /  \\\ng   r  e   at\n           / \\\n          a   t\n\n\nTo scramble the string, we may choose any non-leaf node and swap its two children.\n\n\nFor example, if we choose the node \"gr\" and swap its two children, it produces a scrambled string \"rgeat\".\n\n\n    rgeat\n   /    \\\n  rg    eat\n / \\    /  \\\nr   g  e   at\n           / \\\n          a   t\n\n\nWe say that \"rgeat\" is a scrambled string of \"great\".\n\n\nSimilarly, if we continue to swap the children of nodes \"eat\" and \"at\", it produces a scrambled string \"rgtae\".\n\n\n    rgtae\n   /    \\\n  rg    tae\n / \\    /  \\\nr   g  ta  e\n       / \\\n      t   a\n\n\nWe say that \"rgtae\" is a scrambled string of \"great\".\n\n\nGiven two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.\n", "88": "Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.\n\n\nNote:\nYou may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2. The number of elements initialized in nums1 and nums2 are m and n respectively.", "89": "The gray code is a binary numeral system where two successive values differ in only one bit.\n\nGiven a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.\n\nFor example, given n = 2, return [0,1,3,2]. Its gray code sequence is:\n\n00 - 0\n01 - 1\n11 - 3\n10 - 2\n\n\nNote:\nFor a given n, a gray code sequence is not uniquely defined.\n\nFor example, [0,2,3,1] is also a valid gray code sequence according to the above definition.\n\nFor now, the judge is able to judge based on one instance of gray code sequence. Sorry about that.", "90": "\nGiven a collection of integers that might contain duplicates, nums, return all possible subsets.\n\nNote: The solution set must not contain duplicate subsets.\n\n\nFor example,\nIf nums = [1,2,2], a solution is:\n\n\n\n[\n  [2],\n  [1],\n  [1,2,2],\n  [2,2],\n  [1,2],\n  []\n]\n", "91": "\nA message containing letters from A-Z is being encoded to numbers using the following mapping:\n\n\n\n'A' -> 1\n'B' -> 2\n...\n'Z' -> 26\n\n\n\nGiven an encoded message containing digits, determine the total number of ways to decode it.\n\n\n\nFor example,\nGiven encoded message \"12\",\nit could be decoded as \"AB\" (1 2) or \"L\" (12).\n\n\n\nThe number of ways decoding \"12\" is 2.\n", "92": "\nReverse a linked list from position m to n. Do it in-place and in one-pass.\n\n\n\nFor example:\nGiven 1->2->3->4->5->NULL, m = 2 and n = 4,\n\n\nreturn 1->4->3->2->5->NULL.\n\n\nNote:\nGiven m, n satisfy the following condition:\n1 &le; m &le; n &le; length of list.\n", "93": "Given a string containing only digits, restore it by returning all possible valid IP address combinations.\n\n\nFor example:\nGiven \"25525511135\",\n\n\nreturn [\"255.255.11.135\", \"255.255.111.35\"]. (Order does not matter)\n", "94": "Given a binary tree, return the inorder traversal of its nodes' values.\n\n\nFor example:\nGiven binary tree [1,null,2,3],\n\n   1\n    \\\n     2\n    /\n   3\n\n\n\nreturn [1,3,2].\n\n\nNote: Recursive solution is trivial, could you do it iteratively?", "95": "Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1...n.\n\n\nFor example,\nGiven n = 3, your program should return all 5 unique BST's shown below.\n\n\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3\n\n", "96": "Given n, how many structurally unique BST's (binary search trees) that store values 1...n?\n\n\nFor example,\nGiven n = 3, there are a total of 5 unique BST's.\n\n\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3\n\n", "97": "\nGiven s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.\n\n\n\nFor example,\nGiven:\ns1 = \"aabcc\",\ns2 = \"dbbca\",\n\n\nWhen s3 = \"aadbbcbcac\", return true.\nWhen s3 = \"aadbbbaccc\", return false.\n", "98": "\nGiven a binary tree, determine if it is a valid binary search tree (BST).\n\n\n\nAssume a BST is defined as follows:\n\nThe left subtree of a node contains only nodes with keys less than the node's key.\nThe right subtree of a node contains only nodes with keys greater than the node's key.\nBoth the left and right subtrees must also be binary search trees.\n\n\n\nExample 1:\n\n    2\n   / \\\n  1   3\n\nBinary tree [2,1,3], return true.\n\n\nExample 2:\n\n    1\n   / \\\n  2   3\n\nBinary tree [1,2,3], return false.\n", "99": "\nTwo elements of a binary search tree (BST) are swapped by mistake.\n\nRecover the tree without changing its structure.\n\n\nNote:\nA solution using O(n) space is pretty straight forward. Could you devise a constant space solution?\n"}